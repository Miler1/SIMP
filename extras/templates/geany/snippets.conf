# Arquivo gerado automaticamente pelo comando:
# $ simp template -t geany
[PHP]
__get=//\n//     Obtem um atributo da classe\n//\npublic function __get($atributo) {\n// String $atributo: nome do atributo a ser obtido\n//\n    switch ($atributo) {\n    case 'atributo%cursor%':\n        codigo%cursor%\n    }\n}
__set=//\n//     Define o valor de um atributo da classe\n//\npublic function __set($atributo, $valor) {\n// String $atributo: nome do atributo a ser definido\n// Mixed $valor: valor do atributo\n//\n    switch ($atributo) {\n    case 'atributo%cursor%':\n        codigo%cursor%\n    }\n}
__toString=//\n//     Define a forma como um objeto sera exibido\n//\npublic function __toString() {\n    codigo%cursor%\n}
ajuda=mensagem::comentario($CFG->site%cursor%, $ajuda%cursor%);
campo_aviso=$form->campo_aviso('aviso%cursor%');
campo_bool=$form->campo_bool(name%cursor%, id%cursor%, label%cursor%, valor%cursor%);
campo_busca=$form->campo_busca(name%cursor%, id%cursor%, classe%cursor%, campo%cursor%, valor%cursor%, condicoes%cursor%, 128%cursor%, 30%cursor%, label%cursor%);
campo_checkbox=$vt_nome%cursor% = codigo%cursor%;\n$form->campo_checkbox(name%cursor%, id%cursor%, $vt_nome%cursor%, valores%cursor%, label%cursor%);
campo_data=$form->campo_data('prefixo%cursor%', dia%cursor%, mes%cursor%, ano%cursor%, label%cursor%, anos_passado%cursor%, anos_futuro%cursor%);
campo_file=$form->campo_file(name%cursor%, id%cursor%, label%cursor%);
campo_formulario=//\n//     Indica como um campo deve ser apresentado no formulario\n//\npublic function campo_formulario(&$form, $campo, $valor) {\n// formulario $form: formulario que deve receber o campo\n// String $campo: nome do campo a ser inserido\n// Mixed $valor: valor padrao do campo\n//\n    if ($this->possui_atributo($campo)) {\n        $atributo = $this->get_definicao_atributo($campo);\n    }\n    switch ($campo) {\n    case 'nome_campo%cursor%':\n        $form->campo_text%cursor%();\n        return true;\n    }\n    return parent::campo_formulario($form, $campo, $valor);\n}
campo_hidden=$form->campo_hidden(name%cursor%, valor%cursor%);
campo_hierarquico=$form->campo_hierarquico(name%cursor%, id%cursor%, link%cursor%, valor%cursor%, 128%cursor%, 30%cursor%, label%cursor%);
campo_hora=$form->campo_hora('prefixo%cursor%', hora%cursor%, minuto%cursor%, segundo%cursor%, label%cursor%);
campo_image=$form->campo_image(name%cursor%, id%cursor%, src%cursor%, label%cursor%);
campo_informacao=$form->campo_informacao('informacao%cursor%');
campo_password=$form->campo_password(name%cursor%, id%cursor%, 128%cursor%, 30%cursor%, label%cursor%);
campo_radio=$vt_nome%cursor% = codigo%cursor%;\n$form->campo_radio(name%cursor%, id%cursor%, $vt_nome%cursor%, valor%cursor%, label%cursor%);
campo_relacionamento=$form->campo_relacionamento(name%cursor%, id%cursor%, classe%cursor%, campo_preencher%cursor%, campo_exibir%cursor%, condicoes%cursor%, valor%cursor%, 128%cursor%, 30%cursor%, label%cursor%);
campo_select=$vt_nome%cursor% = codigo%cursor%;\n$form->campo_select(name%cursor%, id%cursor%, $vt_nome%cursor%, valor%cursor%, label%cursor%);
campo_submit=$form->campo_submit('enviar%cursor%', 'enviar%cursor%', 'Enviar%cursor%');
campo_telefone=$form->campo_telefone('prefixo%cursor%', ddd%cursor%, numero%cursor%, label%cursor%);
campo_telefone_comercial=$form->campo_telefone_comercial('prefixo%cursor%', ddd%cursor%, numero%cursor%, ramal%cursor%, label%cursor%);
campo_text=$form->campo_text(name%cursor%, id%cursor%, valor%cursor%, 128%cursor%, 30%cursor%, label%cursor%);
campo_textarea=$form->campo_textarea(name%cursor%, id%cursor%, $valor%cursor%, 30, 5, label%cursor%);
class=class classe%cursor% {\n    \n}//class
comentario=<?php\n//\n// SIMP\n// Descricao: descricao%cursor%\n// Autor: autor%cursor%\n// Orgao: TecnoLivre - Cooperativa de Tecnologia e Solucoes Livres\n// E-mail: email%cursor%@tecnolivre.com.br\n// Versao: 1.0.0.0\n// Data: data%cursor%\n// Modificado: data%cursor%\n// Copyright (C) ano%cursor%  autor%cursor%\n// License: LICENSE.TXT\n//\n
condicoes=$vt_condicoes = array();\n$vt_condicoes[] = condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%);\n$condicoes = condicao_sql::sql_and%cursor%($vt_condicoes);
consultar_varios=$vt_condicoes = array();\n$vt_condicoes[] = condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo2%cursor%', '=%cursor%', valor2%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo3%cursor%', '=%cursor%', valor3%cursor%);\n$condicoes = condicao_sql::sql_and($vt_condicoes);\n$campos = array(\n    'campo%cursor%'\n);\n$ordem = array(\n    'ordem%cursor%' => true%cursor%\n);\n$vt_classe%cursor% = objeto::get_objeto('classe%cursor%')->consultar_varios($condicoes, $campos, $ordem);
converter_componente=// \n//     Converte as componentes de um atributo no respectivo valor do atributo final\n//\nprotected function converter_componente($campo, $valor, $valores) {\n// String $campo: nome do campo\n// Mixed $valor: valor do campo\n// Object $valores: valores a serem convertidos\n//\n    switch ($campo) {\n    case valor%cursor%:\n        codigo%cursor%\n    }\n    return parent::converter_componente($campo, $valor, $valores);\n}
cv=$vt_condicoes = array();\n$vt_condicoes[] = condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo2%cursor%', '=%cursor%', valor2%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo3%cursor%', '=%cursor%', valor3%cursor%);\n$condicoes = condicao_sql::sql_and($vt_condicoes);\n$campos = array(\n    'campo%cursor%'\n);\n$ordem = array(\n    'ordem%cursor%' => true%cursor%\n);\n$vt_classe%cursor% = objeto::get_objeto('classe%cursor%')->consultar_varios($condicoes, $campos, $ordem);
dados_form=/// Dados do Formulario\n$dados_form = new stdClass();\n$dados_form->atributo%cursor% = valor%cursor%
dados_gerais=/// Dados Gerais\n$dados_gerais = new stdClass();\n$dados_gerais->atributo%cursor% = valor%cursor%;
dados_lista=/// Dados da Lista\n$dados_lista = new stdClass();\n$dados_lista->opcoes = array('exibir', 'alterar', 'excluir');\n$dados_lista->campos = array(campos%cursor%);
dados_opcao=//\n//     Retorna um vetor com os dados da opcao (icone) que aparece na lista de entidades\n//\npublic function dados_opcao($opcao, $modulo) {\n// String $opcao: identificador da opcao\n// String $modulo: nome do modulo\n//\n    $dados = new stdClass();\n\n    switch ($opcao) {\n    case 'opcao%cursor%':\n        $dados->icone     = icone::endereco('icone%cursor%');\n        $dados->arquivo   = 'arquivo%cursor%.php';\n        $dados->modulo    = $modulo;\n        $dados->descricao = 'descricao%cursor%';\n        $dados->id        = '';\n        $dados->class     = '';\n        return $dados;\n    }\n\n    return parent::dados_opcao($opcao, $modulo);\n}
dados_pagina=/// Dados da Pagina\n$dados_pagina = new stdClass();\n$dados_pagina->titulo = 'titulo%cursor%';\n
define=define('nome%cursor%', valor%cursor%);
definir_atributos=//\n//     Cria os atributos da classe\n//\nprotected function definir_atributos() {\n\n    codigo%cursor%\n}
definir_entidade=//\n//     Cria a definicao de entidade\n//\nprotected function definir_entidade() {\n    $this->criar_entidade(\n        /* Nome Entidade   */ 'singular%cursor%',\n        /* Entidade Plural */ 'plural%cursor%',\n        /* Genero          */ 'M%cursor%',\n        /* Classe          */ 'classe%cursor%',\n        /* Tabela          */ 'tabela%cursor%',\n        /* Desc. Tabela    */ 'Tabela de descricao%cursor%');\n}
do=do {\n    codigo%cursor%\n} while (condicao%cursor%);
dump=util::dump(variavel%cursor%);
else=else {\n    codigo%cursor%\n}
elseif=elseif (condicao%cursor%) {\n    codigo%cursor%\n}
exibir_atributo=//\n//     Define a forma como um atributo simples e' exibido\n//\npublic function exibir_atributo($nome_atributo) {\n// String $nome_atributo: nome do atributo a ser exibido\n//\n    switch ($nome_atributo) {\n    case 'atributo%cursor%':\n        $valor = codigo%cursor%\n        return $valor;\n    }\n    return parent::exibir_atributo($nome_atributo);\n}
exibir_atributo_implicito=//\n//     Define a forma como um atributo implicito e' exibido\n//\npublic function exibir_atributo_implicito($nome_atributo) {\n// String $nome_atributo: nome do atributo implicito a ser exibido\n//\n    switch ($nome_atributo) {\n    case 'atributo%cursor%':\n        $valor = codigo%cursor%\n        return $valor;\n    }\n    return parent::exibir_atributo_implicito($nome_atributo);\n}
filtro=//\n//     Imprime um formulario de filtro\n//\nfunction imprimir_formulario($dados) {\n// stdClass $dados: dados submetidos\n//\n    global $CFG;\n    $action = $CFG->site;\n    link::normalizar($action, true);\n\n    $padrao = array(\n        'campo%cursor%' => valor%cursor%\n    );\n    $dados = formulario::montar_dados($padrao, $dados);\n\n    $form = new formulario($action, 'id%cursor%');\n    $form->titulo_formulario('Formul&aacute;rio de Filtro');\n    $form->campo_campo%cursor%(parametros%cursor%);\n    $form->campo_submit('enviar', 'enviar', 'Buscar');\n    $form->imprimir();\n}\n\n\n//\n//     Monta as condicoes de filtragem\n//\nfunction montar_condicoes($dados, &$erros) {\n// stdClass $dados: dados submetidos\n// Array[String] $erros: erros ocorridos\n//\n    $vt_condicoes = array();\n\n    if ($dados->campo%cursor%) {\n        $vt_condicoes[] = condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%);\n    }\n\n    $condicoes = condicao_sql::sql_and($vt_condicoes);\n\n    return $condicoes;\n}\n
for=for (atribuicao%cursor%; condicao%cursor%; incremento%cursor%) {\n    codigo%cursor%\n}
foreach=foreach (variavel%cursor% as chave%cursor% => valor%cursor%) {\n    codigo%cursor%\n}
formulario=$form = new formulario($action%cursor%, 'id%cursor%');\n$form->campo_tipo%cursor%(parametros%cursor%);\n$form->imprimir();
fpdf_table=$pdf = new fpdf_table('P%cursor%', 'mm%cursor%', 'A4%cursor%');\n$pdf->SetMargins(esquerda%cursor%, topo%cursor%, direita%cursor%);\n$pdf->SetFont('Arial%cursor%', 'estilos%cursor%', 12%cursor%);\n$pdf->AddPage();\n\ncodigo%cursor%\n\n$pdf->Output('arquivo%cursor%', 'D%cursor%');\nexit(0);
function=//\n//     descricao%cursor%\n//\npublic static %cursor%function funcao%cursor%(parametros%cursor%) {\n    codigo%cursor%\n}
get_campo_nome=//\n//     Retorna o NOME DO ATRIBUTO (simples, implicito ou relacionamento 1:1) usado para identificar o objeto\n//\npublic function get_campo_nome() {\n    return 'atributo%cursor%';\n}
get_definicao_atributo_validacao=//\n//     Retorna a definicao de um atributo simples da classe para validacao\n//\npublic function get_definicao_atributo_validacao($nome_atributo) {\n// String $nome_atributo: nome do atributo desejado\n//\n    switch ($nome_atributo) {\n    case 'nome_atributo%cursor%':\n        $atributo = new atributo('$nome_atributo%cursor%', 'descricao%cursor%', padrao%cursor%);\n        codigo%cursor%\n        return $atributo;\n    }\n    return parent::get_definicao_atributo($nome_atributo);\n}\n
get_info_campo=//\n//     Obtem informacoes sobre um campo do formulario\n//\npublic function get_info_campo($campo) {\n// String $campo: campo desejado\n//\n    switch ($campo) {\n    case 'campo%cursor%':\n        $atributo = new atributo('campo%cursor%', 'descricao%cursor%', padrao%cursor%);\n        definicao%cursor%\n        return $atributo;\n    }\n    return parent::get_info_campo($campo);\n}
get_vetor=//\n//     Obtem a lista de lista%cursor%\n//\nfinal public function get_vetor_atributo%cursor%() {\n    return array(\n        chave1%cursor% => 'valor1%cursor%',\n        chave2%cursor% => 'valor2%cursor%',\n        chave3%cursor% => 'valor3%cursor%'\n    );\n}
http=http::cabecalho('text/css%cursor%', 'arquivo%cursor%', 'inline%cursor%', tempo_expira%cursor%);
if=if (condicoes%cursor%) {\n    codigo%cursor%\n}
ife=if (condicao%cursor%) {\n    codigo if%cursor%\n} else {\n    codigo_else%cursor%\n}
imprimir_objeto_rel_uu=//\n//     Imprime o nome de um objeto filho (relacionamento 1:1)\n//\npublic function imprimir_objeto_rel_uu($nome_atributo, $return = false, $imprimir_descricao = true, $descricao_alternativa = false) {\n// String $nome_atributo: nome do atributo referente ao relacionamento (nome do objeto)\n// Bool $return: indica se o resultado sera' retornado ou impresso\n// Bool $imprimir_descricao: indica se deve ser incluida a descricao do relacionamento\n// String $descricao_alternativa: valor da descricao alternativa a ser utilizada\n//\n    switch ($nome_atributo) {\n    case 'objeto%cursor%':\n        $valor = '';\n        codigo%cursor%\n        if ($return) {\n            return $valor;\n        }\n        echo $valor;\n        return;\n    }\n    return parent::imprimir_objeto_rel_uu($nome_atributo, $return, $imprimir_descricao, $descricao_alternativa);\n}
imprimir_vetor_rel_un=//\n//     Imprime um vetor da entidade (relacionamento 1:N)\n//     \npublic function imprimir_vetor_rel_un($nome_vetor, $return = false, $imprimir_descricao = true) {\n// String $nome_vetor: nome do vetor\n// Bool $return: retornar ou imprimir o vetor\n// Bool $imprimir_descricao: imprime a descricao para cada item do vetor\n//\n    switch ($nome_vetor) {\n    case 'vetor%cursor%':\n        $valor = '';\n        codigo%cursor%\n        if ($return) {\n            return $valor;\n        }\n        echo $valor;\n        return;\n    }\n    return parent::imprimir_vetor_rel_un($nome_vetor, $return, $imprimir_descricao);\n}
interface=interface interface%cursor% {\n    metodos%cursor%\n}
maviso=mensagem::aviso($avisos%cursor%);
merro=mensagem::erro($erros%cursor%);
montar_dados=$padrao = array(\n    'campo%cursor%' => valor%cursor%\n);\n$dados = formulario::montar_dados($padrao, $dados);
nav=$dados_pagina->nav[] = 'modulo%cursor%#arquivo%cursor%';
pode_acessar_formulario=//\n//     Indica se o formulario de um registro pode ser acessado ou nao por um usuario\n//\npublic function pode_acessar_formulario(&$usuario, &$motivo = '') {\n// usuario $usuario: usuario a ser testado\n// String $motivo: motivo pelo qual nao se pode acessar o registro\n//\n    $r = true;\n    switch ($this->id_form) {\n    case $this->id_formulario_inserir%cursor%():\n        if (condicoes%cursor%) {\n            $r = false;\n            $motivo = 'motivo%cursor%';\n        }\n        break;\n    }\n    return $r;\n}
pode_exibir=//\n//     Indica se o registro pode ser exibido ou nao por um usuario\n//\npublic function pode_exibir(&$usuario, &$motivo = '') {\n// usuario $usuario: usuario a ser testado\n// String $motivo: motivo pelo qual nao se pode exibir registro\n//\n    $r = true;\n    if (condicoes%cursor%) {\n        $r = false;\n        $motivo = 'motivo%cursor%';\n    }\n    return $r;\n}
pode_ser_manipulado=//\n//     Indica se o registro pode ser manipulado pelo usuario\n//\npublic function pode_ser_manipulado(&$usuario) {\n// usuario $usuario: usuario a ser testado\n//\n    $r = false;\n    if (condicoes%cursor%) {\n        $r = true;\n    }\n    return $r;\n}
pos_salvar=//\n//     Operacoes realizadas apos salvar os dados no BD\n//\npublic function pos_salvar() {\n    $r = true;\n    switch ($this->id_form) {\n    case $this->id_formulario_inserir%cursor%():\n        codigo%cursor%\n        break;\n    }\n    return $r;\n}
pre_salvar=//\n//     Operacoes realizadas antes de salvar os dados no BD\n//\npublic function pre_salvar(&$salvar_campos) {\n// Array[String] $salvar_campos: vetor de campos a serem salvos\n//\n    $r = true;\n    switch ($this->id_form) {\n    case $this->id_formulario_inserir%cursor%():\n        codigo%cursor%\n        break;\n    }\n    return $r;\n}
procedure=//\n//     descricao%cursor%\n//\npublic static %cursor%function funcao%cursor%(parametros%cursor%) {\n    codigo%cursor%\n}
sqland=condicao_sql::sql_and($vt_condicoes%cursor%)
sqlbetween=condicao_sql::between('atributo%cursor%', inicio%cursor%, fim%cursor%)
sqldata=condicao_sql::data('atributo%cursor%', 'dd-mm-aaaa-hh-mm-ss%cursor%')
sqlexcept=condicao_sql::except('atributo%cursor%', array(valores%cursor%))
sqlin=condicao_sql::sql_in('atributo%cursor%', array(valores%cursor%))
sqlmontar=condicao_sql::montar('atributo%cursor%', '=%cursor%', valor%cursor%)
sqlnot=condicao_sql::sql_not($condicao%cursor%);
sqlor=condicao_sql::sql_or($vt_condicoes%cursor%)
sqlvazia=condicao_sql::vazia()
sqlvetor=condicao_sql::montar_vetor($valores%cursor%)
switch=switch (valor%cursor%) {\ncase valor%cursor%:\n    codigo%cursor%\n    break;\ndefault:\n    codigo2%cursor%\n    break;\n}
try=try {\n    codigo%cursor%\n} catch (Exception%cursor% $e) {\n    codigo2%cursor%\n}
validacao_final=//\n//     Realiza a validacao final dos dados antes de salva-los (util para validar atributos dependentes)\n//\npublic function validacao_final(&$dados) {\n// Object $dados: dados a serem validados\n//\n    $r = true;\n    switch ($this->id_form) {\n    case $this->id_formulario_inserir%cursor%():\n        codigo%cursor%\n        break;\n    }\n    return $r;\n}
vetor_associativo=$vt_condicoes = array();\n$vt_condicoes[] = condicao_sql::montar('atributo1%cursor%', '=%cursor%', valor1%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo2%cursor%', '=%cursor%', valor2%cursor%);\n$vt_condicoes[] = condicao_sql::montar('atributo3%cursor%', '=%cursor%', valor3%cursor%);\n$condicoes = condicao_sql::sql_and($vt_condicoes);\n$ordem = array(\n    'ordem%cursor%' => true%cursor%\n);\n$vt_classe%cursor% = objeto::get_objeto('classe%cursor%')->vetor_associativo(chave%cursor%, valor%cursor%, $condicoes, $ordem);
while=while (condicao%cursor%) {\n    codigo%cursor%\n}
